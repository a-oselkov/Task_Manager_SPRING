plugins {
	id 'application'
	id 'checkstyle'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.adarshr.test-logger' version '2.1.1'
	id 'com.github.ben-manes.versions' version '0.38.0'
	id 'org.liquibase.gradle' version '2.2.0'
//	// Плагины для swagger
//	// Позволяют получить сгенерированную документацию по API в виде json файла
	id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
	id 'com.github.johnrengelman.processes' version '0.5.0'
//	// Сборщик фронтенда
	id 'org.siouan.frontend-jdk11' version '6.0.0'
	id 'jacoco'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'


application {
	mainClass = 'hexlet.code.AppApplication'
}

repositories {
	mavenCentral()
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	testImplementation 'com.github.database-rider:rider-junit5:1.32.0'
	runtimeOnly 'com.h2database:h2:1.4.200'
	annotationProcessor(
			'org.projectlombok:lombok',
			'com.querydsl:querydsl-apt:5.0.0:jakarta',
			'jakarta.persistence:jakarta.persistence-api:3.1.0'
	)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation(
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-actuator',
			'org.springframework.boot:spring-boot-starter-validation',
			'io.jsonwebtoken:jjwt:0.9.1',
//			'org.mapstruct:mapstruct:1.5.5.Final',
//			'org.mapstruct:mapstruct-processor:1.5.5.Final',
			// Зависимость для swagger
			// Позволяет сгенерировать и проматривать интерактивную документацию по API
			'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0',
//			'org.springdoc:springdoc-openapi-ui:1.7.0', //1.5.12
			'org.liquibase:liquibase-core',
			'com.querydsl:querydsl-jpa:5.0.0:jakarta',
			'com.rollbar:rollbar-spring-boot-webmvc:1.10.0'


	)

	liquibaseRuntime(
			sourceSets.main.output,
			'org.liquibase:liquibase-core',
			'info.picocli:picocli:4.7.1',
			'org.liquibase.ext:liquibase-hibernate6:4.21.1',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'com.h2database:h2'
	)

	runtimeOnly (
			'com.h2database:h2',
			'org.postgresql:postgresql:42.6.0'
	)

	testImplementation(
			//'org.springframework.boot:spring-boot-starter-security',
			'org.springframework.boot:spring-boot-starter-test',
			'com.tobedevoured.modelcitizen:spring:0.8.3'
	)
}

wrapper {
	gradleVersion = '8.1.1'
	distributionType = Wrapper.DistributionType.ALL
}

compileJava {
	options.release = 17
	options.encoding = 'UTF-8'
}

test {
	useJUnitPlatform()
}

// Настраиваем таску diffChangeLog таким образом,
// чтобы миграции учитывали изменения в моделях
diffChangelog {
	dependsOn compileJava
}

// Настраиваем Liquibase
liquibase {
	activities {
		main {
			// Указываем путь, по которому будет сгенерирован файл миграции
			changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
			url 'jdbc:h2:./task_manager'
			referenceUrl 'hibernate:spring:hexlet.code.model.' +
					// Указываем диалект
					'?dialect=org.hibernate.dialect.H2Dialect' +
					// Указываем правила именования таблиц и столбцов,
					// чтобы они соответствовали правилам Spring
					'&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
		}
	}
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}


tasks.named('test') {
	useJUnitPlatform()
}
